version: '3.8'

services:
  # Core API service
  neuro-law-api:
    build:
      context: .
      target: api-server
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
    volumes:
      - ./contracts:/app/contracts:ro
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # CLI service for batch processing
  neuro-law-cli:
    build:
      context: .
      target: production
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=INFO
    volumes:
      - ./contracts:/app/contracts:ro
      - ./reports:/app/reports
      - ./logs:/app/logs
    profiles:
      - batch
    command: ["python", "-m", "neuro_symbolic_law.cli", "verify", "/app/contracts/sample.txt"]

  # Development service
  neuro-law-dev:
    build:
      context: .
      target: development
    ports:
      - "8000:8000"
      - "8888:8888"  # Jupyter
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=DEBUG
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
    profiles:
      - dev
    command: ["python", "-m", "neuro_symbolic_law.cli", "--help"]

  # Database for caching and analytics
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    profiles:
      - monitoring
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    profiles:
      - monitoring
    restart: unless-stopped

  # Reverse proxy and load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - neuro-law-api
    profiles:
      - production
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge